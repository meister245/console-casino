import{RouletteBot}from"./bot/roulette";import{Playtech}from"./driver/playtech";class ConsoleCasino{constructor(t){this.drivers=["playtech"],this.roulette=new RouletteBot(this.getDriver(t))}getDriver(t){if(!ConsoleCasino.getDrivers().includes(t))throw new Error(`invalid driver name ${t}`);if("playtech"===t)return new Playtech}}const gameState={stageBet:"stage-bet",stageSpin:"stage-spin",stageWait:"stage-wait",stageResults:"stage-results"},rouletteNumbers={red:[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36],black:[2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35],low:[...Array(18).keys()].map(t=>t+1),high:[...Array(18).keys()].map(t=>t+19),odd:[...Array(18).keys()].map(t=>2*(t+1)-1),even:[...Array(18).keys()].map(t=>2*(t+1)),dozenFirst:[...Array(12).keys()].map(t=>t+1),dozenSecond:[...Array(12).keys()].map(t=>t+13),dozenThird:[...Array(12).keys()].map(t=>t+25),columnTop:[...Array(12).keys()].map(t=>3*(t+1)),columnMiddle:[...Array(12).keys()].map(t=>3*(t+1)-1),columnBottom:[...Array(12).keys()].map(t=>3*(t+1)-2)};class CommonBot{getOptions(t){const e=t||{},a={dryRun:!0,chipSize:.2};for(const t in a)t in e&&(a[t]=e[t]);return a}sleep(t){return new Promise(e=>setTimeout(e,t))}}import{CommonBot}from"./common";import{RouletteStrategy}from"../strategy/roulette";class RouletteBot extends CommonBot{constructor(t){super(),this.driver=t}start(t=5,e={}){if(!(e=this.getOptions(e)).dryRun&&t>this.driver.getBalance())throw new Error("balance too low");const a=new RouletteStrategy(this.driver,t,e);for(;;)a.runStrategy(),this.sleep(1500)}async backtest(t,e,a={}){let s,r;(a=await this.getOptions(a)).dryRun=!0;try{s=await this.driver.getExtendedHistory()}catch(t){await this.driver.viewExtendedHistory(),s=await this.driver.getExtendedHistory()}finally{r=await this.getStrategy("backtest",t,e,a),await r.runBacktest(s)}}}class DriverCommon{simulatedClick(t,e){const a=t.ownerDocument.createEvent("MouseEvents"),s=e||{},r={type:"click",canBubble:!0,cancelable:!0,view:t.ownerDocument.defaultView,detail:1,screenX:0,screenY:0,clientX:0,clientY:0,ctrlKey:!1,altKey:!1,shiftKey:!1,metaKey:!1,button:0,relatedTarget:null};for(const t in s)t in s&&(r[t]=s[t]);a.initMouseEvent(r.type,r.canBubble,r.cancelable,r.view,r.detail,r.screenX,r.screenY,r.clientX,r.clientY,r.ctrlKey,r.altKey,r.shiftKey,r.metaKey,r.button,r.relatedTarget),t.dispatchEvent(a)}}import{DriverCommon}from"./common";class Playtech extends DriverCommon{constructor(){super(),this.selectors={chip:{.1:"chipsPanel.chip10",.2:"chipsPanel.chip20",.25:"chipsPanel.chip25",.5:"chipsPanel.chip50",1:"chipsPanel.chip100",5:"chipsPanel.chip500",10:"chipsPanel.chip1000",25:"chipsPanel.chip2500",100:"chipsPanel.chip10000",500:"chipsPanel.chip50000",1e3:"chipsPanel.chip100000"},roulette:{even:"betPlace.spots50x50-even",odd:"betPlace.spots50x50-odd",red:"betPlace.spots50x50-red",black:"betPlace.spots50x50-black",low:"betPlace.spots50x50-1to18",high:"betPlace.spots50x50-19to36",columnBottom:"betPlace.column-1",columnMiddle:"betPlace.column-2",columnTop:"betPlace.column-3",firstDozen:"betPlace.dozen-1st12",secondDozen:"betPlace.dozen-2nd12",thirdDozen:"betPlace.dozen-3rd12"}}}getBalance(){const t=document.querySelector('[data-automation-locator="footer.balance"]').textContent;return parseFloat(t.match(/\d+(?:\.\d+)*/g)[0])}getBetAmount(){const t=document.querySelector('[data-automation-locator="footer.betAmount"]').textContent;return parseFloat(t.match(/\d+(?:\.\d+)*/g)[0])}getDealerMessage(){return document.querySelector('[class="dealer-message-text"]').textContent}getDealerName(){return document.querySelector('[data-automation-locator="field.dealerNickname"]').textContent}getExtendedHistory(){return[...document.querySelector('[class^="roulette-history-extended__items"]').children].map(t=>parseInt(t.textContent)).reverse()}getLastNumber(){const t=document.querySelector('[data-automation-locator="field.lastHistoryItem"]');return parseInt(t.textContent)}getLastNumbers(){return[...document.querySelector(".roulette-game-area__history-line").children[0].children].map(t=>parseInt(t.textContent))}getWinAmount(){const t=document.querySelector('[data-automation-locator="footer.winAmount"]');return parseFloat(t.textContent.match(/[0-9]+(?:\.[0-9]+)*/g)[0])}setBet(t){this.simulatedClick(document.querySelector(`[data-automation-locator="${this.selectors.roulette[t]}"]`))}setBetDouble(){this.simulatedClick(document.querySelector('[data-automation-locator="button.Double"]'))}setBetUndo(){this.simulatedClick(document.querySelector('[data-automation-locator="button.Undo"]'))}setChipSize(t){this.simulatedClick(document.querySelector(`[data-automation-locator="${this.selectors.chip[t]}"]`))}viewTableLimits(){this.simulatedClick(document.querySelector('[data-automation-locator="button.limits"]'))}viewExtendedHistory(){this.simulatedClick(document.querySelector('[data-automation-locator="button.extenededHistory"]'))}viewStatistics(){this.simulatedClick(document.querySelector('[data-automation-locator="button.statistic"]'))}viewStatisticsChart(){this.simulatedClick(document.querySelector('[data-automation-locator="button.StatisticChart"]'))}}class StrategyCommon{constructor(){this.lastBetTime=null}updateLastBetTime(){this.lastBetTime=Math.floor(Date.now()/1e3)}}import{rouletteNumbers,gameState}from"../constants";import{StrategyCommon}from"./common";class RouletteStrategy extends StrategyCommon{constructor(t,e,a){super(),this.driver=t,this.options=a,this.lastBetTime=null,this.results={gameWin:0,gameLose:0,profit:0},this.state={bet:{},betNumber:1,betMultiplier:1,bagSize:e.valueOf(),bagSizeCurrent:e.valueOf(),gameStage:gameState.stageSpin}}runStrategy(){const t=this.driver.getLastNumber(),e=this.driver.getDealerMessage().toLowerCase();switch(this.state.gameStage){case gameState.stageSpin:this.runStageSpin(e);break;case gameState.stageBet:this.runStageBet(e,t);break;case gameState.stageWait:this.runStageWait(e);break;case gameState.stageResults:this.runStageResult(e,t)}}runBacktest(t){for(let e=1;e<t.length;e++)this.state.gameStage=gameState.stageBet,this.runStageBet("place your bets",t[e-1]),this.state.gameStage=gameState.stageResults,this.runStageResult("place your bets",t[e])}runStageSpin(t){"wait for the next round"===t&&(console.log("stage spin"),this.state.gameStage=gameState.stageBet)}runStageBet(t,e){let a=null,s=null;const r=[this.state.betNumber,"stage","bet"],i=this.state.betMultiplier*this.options.chipSize;if("place your bets"===t||"last bets"===t){if(rouletteNumbers.red.includes(e)?(a="red",s=this.driver.rouletteBetMapping.red):rouletteNumbers.black.includes(e)&&(a="black",s=this.driver.rouletteBetMapping.black),r.push("lastNumber",e),null===a)this.state.bet={null:0};else{if(this.state.bagSizeCurrent<i)throw new Error("out of money");if(0===Object.keys(this.state.bet).length){for(let t=1;t<=this.state.betMultiplier;t++)this.options.dryRun||(this.driver.setChipSize(this.options.chipSize),this.driver.setBet(s)),this.state.bagSizeCurrent-=this.options.chipSize;this.state.bet[a]=i,r.push("bet",a,i.toFixed(2))}}console.log(r.join(" ")),this.state.gameStage=gameState.stageWait}}runStageWait(t){"wait for the next round"===t&&(console.log(this.state.betNumber+" stage wait"),this.state.gameStage=gameState.stageResults)}runStageResult(t,e){let a=null;const s=[this.state.betNumber,"stage","result"];"place your bets"!==t&&"last bets"!==t||(rouletteNumbers.black.includes(e)?a="black":rouletteNumbers.red.includes(e)&&(a="red"),"null"in this.state.bet?(s.push("N/A"),this.state.bet={}):a in this.state.bet?(s.push("win"),this.state.bagSizeCurrent+=2*this.state.bet[a],this.state.bagSizeCurrent>this.state.bagSize&&(this.results.profit+=this.state.bagSizeCurrent-this.state.bagSize,this.state.bagSizeCurrent=this.state.bagSize.valueOf(),this.state.betMultiplier=1),this.results.gameWin+=1,this.state.bet={},this.state.betMultiplier-=1===this.state.betMultiplier?0:1):Object.keys(this.state.bet).length>0&&(s.push("lose"),this.results.gameLose+=1,this.state.bet={},this.state.betMultiplier+=1),s.push("bagsize",this.state.bagSizeCurrent.toFixed(2)),s.push("profit",this.results.profit.toFixed(2)),console.log(s.join(" ")),this.state.gameStage=gameState.stageBet,this.state.betNumber+=1)}getWinTypes(t){const e=[];return Object.keys(rouletteNumbers).forEach(a=>{rouletteNumbers[a].includes(t)&&e.push(a)}),e}}