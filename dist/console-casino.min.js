class ConsoleCasino{constructor(t){this.roulette=new RouletteBot(this.getDriver(t))}getDriver(t){switch(t){case"playtech":return new Playtech;default:throw new Error(`invalid driver name ${t}`)}}}const gameState={stageBet:"stage-bet",stageSpin:"stage-spin",stageWait:"stage-wait",stageResults:"stage-results"},rouletteNumbers={red:[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36],black:[2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35],low:[...Array(18).keys()].map(t=>t+1),high:[...Array(18).keys()].map(t=>t+19),odd:[...Array(18).keys()].map(t=>2*(t+1)-1),even:[...Array(18).keys()].map(t=>2*(t+1)),dozenFirst:[...Array(12).keys()].map(t=>t+1),dozenSecond:[...Array(12).keys()].map(t=>t+13),dozenThird:[...Array(12).keys()].map(t=>t+25),columnTop:[...Array(12).keys()].map(t=>3*(t+1)),columnMiddle:[...Array(12).keys()].map(t=>3*(t+1)-1),columnBottom:[...Array(12).keys()].map(t=>3*(t+1)-2)};class BetManager{constructor(){this.lastBetTime=null}updateLastBetTime(){this.lastBetTime=Math.floor(Date.now()/1e3)}}class RouletteBetManager extends BetManager{constructor(t,e){super(),this.driver=t,this.options=e,this.state={pendingGame:null,gameStage:gameState.stageSpin,bagSizeCurrent:this.options.bagSize.valueOf()}}runStrategy(){let t=!1;try{t=this.driver.getPopupMessage().match(/(reload|try\sagain)/g)}catch{t=!0}t&&window.location.reload();const e=this.driver.getLastNumber(),s=this.driver.getDealerMessage().toLowerCase();switch(this.state.gameStage){case gameState.stageSpin:this.runStageSpin(s);break;case gameState.stageBet:this.runStageBet(s);break;case gameState.stageWait:this.runStageWait(s);break;case gameState.stageResults:this.runStageResult(s,e)}}runStageSpin(t){this.logMessage("waiting for next round"),"wait for the next round"===t&&(this.state.gameStage=gameState.stageBet)}runStageBet(t){if(this.logMessage("waiting to be able to place bets"),["place your bets","last bets"].includes(t)){if(null===this.state.pendingGame){this.logMessage("no bets in progress");const t=this.driver.getExtendedHistory();for(const e in rouletteStrategy){const s=rouletteStrategy[e];let o=!1,r=!1;if(this.isPatternMatching(s.trigger.pattern,t)&&(o=!0),this.isPercentageMatching(s.trigger.distribution,t)&&(r=!0),o&&r){this.logMessage("strategy matched - "+e),this.state.pendingGame={bets:s.bets,progression:s.progression,strategy:e,multiplier:{current:1,limit:s.stopLossLimit}},this.submitBets();break}}}else this.logMessage("continue with betting"),this.submitBets();this.state.gameStage=gameState.stageWait}}runStageWait(t){this.logMessage("waiting for next round"),"wait for the next round"===t&&(this.state.gameStage=gameState.stageResults)}runStageResult(t,e){if(this.logMessage("waiting for result"),["place your bets","last bets"].includes(t)){if(this.logMessage("processing results"),this.state.pendingGame){const t=this.getWinTypes(e),s=rouletteStrategy[this.state.pendingGame.strategy];let o=!1;if(s.bets.forEach(e=>{t.includes(e)&&(o=!0)}),o)this.logMessage("win"),this.state.pendingGame=null;else{if(this.state.pendingGame.multiplier.current===this.state.pendingGame.multiplier.limit)throw new Error("stop loss limit reached");this.logMessage("lose"),this.state.pendingGame.multiplier.current+=1}}this.state.gameStage=gameState.stageBet}}submitBets(){if(this.logMessage("submit bets"),!this.options.dryRun){this.driver.setChipSize(this.options.chipSize),this.state.pendingGame.bets.forEach(t=>this.driver.setBet(t));for(let t=1;t<this.state.pendingGame.multiplier.current;t++)this.driver.setBetDouble()}}isPercentageMatching(t,e){const s=t[0],o=t[1],r=t[2],i=t[3],a=rouletteNumbers[s],n=[...e.reverse()].slice(0,o);let l=0;n.forEach(t=>{a.includes(t)&&(l+=1)});const c=Math.floor(l/n.length*100);switch(i){case"lowerEqual":return c<=r;case"equal":return c===r;case"higherEqual":return c>=r;default:return!1}}isPatternMatching(t,e){let s=!0;for(const o in t){const r=t[o],i=e[e.length-o],a=this.getWinTypes(i);s=s&&a.includes(r)}return s}getWinTypes(t){const e=[];for(const s in rouletteNumbers)rouletteNumbers[s].includes(t)&&e.push(s);return e}logMessage(t){const e=["console-casino",this.state.gameStage,t];console.log(e.join(" - "))}}class CommonBot{constructor(t){this.driver=t,this.running=!1,this.timeStarted=Math.floor(Date.now()/1e3)}getOptions(t){const e=t||{},s={dryRun:!0,bagSize:10,chipSize:.2};for(const t in s)t in e&&(s[t]=e[t]);return s}sleep(t){return new Promise(e=>setTimeout(e,t))}}class RouletteBot extends CommonBot{async start(t={}){const e=await this.getOptions(t),s=await this.driver.getBalance();if(!t.dryRun&&e.bagSize>s)throw new Error("balance too low");if(this.running)throw new Error("already started");this.running=!0;const o=new RouletteBetManager(this.driver,e);for(this.driver.toggleExtendedHistory();this.running;)await o.runStrategy(),await this.sleep(1500)}async stop(){this.running=!1}}class DriverCommon{simulatedClick(t,e){const s=t.ownerDocument.createEvent("MouseEvents"),o=e||{},r={type:"click",canBubble:!0,cancelable:!0,view:t.ownerDocument.defaultView,detail:1,screenX:0,screenY:0,clientX:0,clientY:0,ctrlKey:!1,altKey:!1,shiftKey:!1,metaKey:!1,button:0,relatedTarget:null};for(const t in o)t in o&&(r[t]=o[t]);s.initMouseEvent(r.type,r.canBubble,r.cancelable,r.view,r.detail,r.screenX,r.screenY,r.clientX,r.clientY,r.ctrlKey,r.altKey,r.shiftKey,r.metaKey,r.button,r.relatedTarget),t.dispatchEvent(s)}}class Playtech extends DriverCommon{constructor(){super(),this.selectors={chip:{.1:"chipsPanel.chip10",.2:"chipsPanel.chip20",.25:"chipsPanel.chip25",.5:"chipsPanel.chip50",1:"chipsPanel.chip100",5:"chipsPanel.chip500",10:"chipsPanel.chip1000",25:"chipsPanel.chip2500",100:"chipsPanel.chip10000",500:"chipsPanel.chip50000",1e3:"chipsPanel.chip100000"},roulette:{even:"betPlace.spots50x50-even",odd:"betPlace.spots50x50-odd",red:"betPlace.spots50x50-red",black:"betPlace.spots50x50-black",low:"betPlace.spots50x50-1to18",high:"betPlace.spots50x50-19to36",columnBottom:"betPlace.column-1",columnMiddle:"betPlace.column-2",columnTop:"betPlace.column-3",firstDozen:"betPlace.dozen-1st12",secondDozen:"betPlace.dozen-2nd12",thirdDozen:"betPlace.dozen-3rd12"}}}getBalance(){const t=document.querySelector('[data-automation-locator="footer.balance"]').textContent;return parseFloat(t.match(/\d+(?:\.\d+)*/g)[0])}getBetAmount(){const t=document.querySelector('[data-automation-locator="footer.betAmount"]').textContent;return parseFloat(t.match(/\d+(?:\.\d+)*/g)[0])}getDealerMessage(){return document.querySelector('[class="dealer-message-text"]').textContent}getDealerName(){return document.querySelector('[data-automation-locator="field.dealerNickname"]').textContent}getExtendedHistory(){return[...[...document.querySelector('[class^="roulette-history-extended__items"]').children].map(t=>parseInt(t.textContent)).reverse()]}getLastNumber(){const t=document.querySelector('[data-automation-locator="field.lastHistoryItem"]');return parseInt(t.textContent)}getLastNumbers(){return[...document.querySelector(".roulette-game-area__history-line").children[0].children].map(t=>parseInt(t.textContent))}getPopupMessage(){return document.querySelector('[data-automation-locator="popup.action"]').textContent}getWinAmount(){const t=document.querySelector('[data-automation-locator="footer.winAmount"]');return parseFloat(t.textContent.match(/[0-9]+(?:\.[0-9]+)*/g)[0])}setBet(t){this.simulatedClick(document.querySelector(`[data-automation-locator="${this.selectors.roulette[t]}"]`))}setBetDouble(){this.simulatedClick(document.querySelector('[data-automation-locator="button.Double"]'))}setBetUndo(){this.simulatedClick(document.querySelector('[data-automation-locator="button.Undo"]'))}setChipSize(t){this.simulatedClick(document.querySelector(`[data-automation-locator="${this.selectors.chip[t]}"]`))}toggleTableLimits(){this.simulatedClick(document.querySelector('[data-automation-locator="button.limits"]'))}toggleExtendedHistory(){this.simulatedClick(document.querySelector('[data-automation-locator="button.extenededHistory"]'))}toggleStatistics(){this.simulatedClick(document.querySelector('[data-automation-locator="button.statistic"]'))}toggleStatisticsChart(){this.simulatedClick(document.querySelector('[data-automation-locator="button.StatisticChart"]'))}}const rouletteStrategy={redLowOccurrence:{bets:["red"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["black","black"],distribution:["red",100,40,"lowerEqual"]}},blackLowOccurrence:{bets:["black"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["red","red"],distribution:["black",100,40,"lowerEqual"]}},evenLowOccurrence:{bets:["even"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["odd","odd"],distribution:["even",100,40,"lowerEqual"]}},oddLowOccurrence:{bets:["odd"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["even","even"],distribution:["odd",100,40,"lowerEqual"]}},lowLowOccurrence:{bets:["low"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["high","high"],distribution:["low",100,40,"lowerEqual"]}},highLowOccurrence:{bets:["high"],progression:"martingale",stopLossLimit:8,trigger:{pattern:["low","low"],distribution:["high",100,40,"lowerEqual"]}},dozenFirstHighOccurrence:{bets:["dozenSecond","dozenThird"],progression:"martingale",stopLossLimit:6,trigger:{pattern:["dozenFirst","dozenFirst"],distribution:["dozenFirst",100,36,"higherEqual"]}},dozenSecondHighOccurrence:{bets:["dozenFirst","dozenThird"],progression:"martingale",stopLossLimit:6,trigger:{pattern:["dozenSecond","dozenSecond"],distribution:["dozenSecond",100,36,"higherEqual"]}},dozenThirdHighOccurrence:{bets:["dozenFirst","dozenSecond"],progression:"martingale",betLossLimit:6,trigger:{pattern:["dozenThird","dozenThird"],distribution:["dozenThird",100,36,"higherEqual"]}},columnTopHighOccurrence:{bets:["columnMiddle","columnBottom"],progression:"martingale",stopLossLimit:6,trigger:{pattern:["columnTop","columnTop"],distribution:["columnTop",100,36,"higherEqual"]}},columnMiddleHighOccurrence:{bets:["columnTop","columnBottom"],progression:"martingale",stopLossLimit:6,trigger:{pattern:["columnMiddle","columnMiddle"],distribution:["columnMiddle",100,36,"higherEqual"]}},columnBottomHighOccurrence:{bets:["columnTop","columnMiddle"],progression:"martingale",stopLossLimit:6,trigger:{pattern:["columnBottom","columnBottom"],distribution:["columnBottom",100,36,"higherEqual"]}}};